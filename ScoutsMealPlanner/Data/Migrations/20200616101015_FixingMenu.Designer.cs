// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScoutsMealPlanner.Data;

namespace ScoutsMealPlanner.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200616101015_FixingMenu")]
    partial class FixingMenu
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ScoutsMealPlanner.Models.Camp", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Camps");

                    b.HasData(
                        new
                        {
                            ID = new Guid("626556f9-65ac-4da2-b099-75462405a60d"),
                            Name = "Stradbroke Cup"
                        },
                        new
                        {
                            ID = new Guid("9fbd6d57-b590-4651-be8c-49462f76cf8c"),
                            Name = "Annual Camp"
                        });
                });

            modelBuilder.Entity("ScoutsMealPlanner.Models.Equipment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Equipment");

                    b.HasData(
                        new
                        {
                            ID = new Guid("3aff04cd-288c-4cf8-a461-41a7c9e2a91f"),
                            Name = "Pot (Large)"
                        });
                });

            modelBuilder.Entity("ScoutsMealPlanner.Models.Ingredient", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("GlutenFree")
                        .HasColumnType("bit");

                    b.Property<Guid>("IngredientCategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IngredientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LactoseFree")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Perishable")
                        .HasColumnType("bit");

                    b.Property<bool>("Standard")
                        .HasColumnType("bit");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("money");

                    b.Property<double>("UnitQuantity")
                        .HasColumnType("float");

                    b.Property<bool>("Vegetarian")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("IngredientCategoryID");

                    b.HasIndex("IngredientID");

                    b.ToTable("Ingredient");

                    b.HasData(
                        new
                        {
                            ID = new Guid("a21b0aef-f047-466b-b440-888db0762dbb"),
                            GlutenFree = true,
                            IngredientCategoryID = new Guid("940da46d-e355-4a70-aea6-5650ff85eacf"),
                            LactoseFree = false,
                            Name = "Milk - Full Cream (UHT)",
                            Perishable = true,
                            Standard = true,
                            Unit = "Litre",
                            UnitCost = 2m,
                            UnitQuantity = 2.0,
                            Vegetarian = true
                        },
                        new
                        {
                            ID = new Guid("93058517-d4a9-4008-9d84-0c8b2416ff35"),
                            GlutenFree = false,
                            IngredientCategoryID = new Guid("940da46d-e355-4a70-aea6-5650ff85eacf"),
                            LactoseFree = true,
                            Name = "Milk - Lactose Free (UHT) (LF)",
                            Perishable = false,
                            Standard = false,
                            Unit = "Litre",
                            UnitCost = 2m,
                            UnitQuantity = 2.0,
                            Vegetarian = false
                        },
                        new
                        {
                            ID = new Guid("61836688-8942-4bb6-b3f0-59ac76e16e76"),
                            GlutenFree = true,
                            IngredientCategoryID = new Guid("e2c53348-0f87-4fe8-af85-fa9329a9af5c"),
                            LactoseFree = true,
                            Name = "Hot Chocolate Powder",
                            Perishable = false,
                            Standard = true,
                            Unit = "Kilogram",
                            UnitCost = 4m,
                            UnitQuantity = 0.40000000000000002,
                            Vegetarian = true
                        },
                        new
                        {
                            ID = new Guid("40236481-6766-48e6-982b-aea9a5f751c6"),
                            GlutenFree = true,
                            IngredientCategoryID = new Guid("81a35256-2783-4d63-8f78-dcd836cb26b7"),
                            LactoseFree = true,
                            Name = "Sausages",
                            Perishable = true,
                            Standard = true,
                            Unit = "Each",
                            UnitCost = 1.16m,
                            UnitQuantity = 1.0,
                            Vegetarian = false
                        },
                        new
                        {
                            ID = new Guid("3e106ea9-170e-42be-a956-48d618124ba6"),
                            GlutenFree = false,
                            IngredientCategoryID = new Guid("e2c53348-0f87-4fe8-af85-fa9329a9af5c"),
                            LactoseFree = false,
                            Name = "Vegetarian Sausages",
                            Perishable = true,
                            Standard = false,
                            Unit = "Packet",
                            UnitCost = 6m,
                            UnitQuantity = 0.33000000000000002,
                            Vegetarian = true
                        },
                        new
                        {
                            ID = new Guid("7769dd8d-d19d-4f31-a550-131765363575"),
                            GlutenFree = false,
                            IngredientCategoryID = new Guid("940723ff-45eb-4977-8abb-33f3705597c4"),
                            LactoseFree = true,
                            Name = "Hot Dog Buns",
                            Perishable = true,
                            Standard = true,
                            Unit = "Each",
                            UnitCost = 2m,
                            UnitQuantity = 1.0,
                            Vegetarian = true
                        },
                        new
                        {
                            ID = new Guid("f43b47c4-d63c-441e-a9b0-18e6ed3612f4"),
                            GlutenFree = true,
                            IngredientCategoryID = new Guid("940723ff-45eb-4977-8abb-33f3705597c4"),
                            LactoseFree = false,
                            Name = "Gluten Free Bread (GF)",
                            Perishable = false,
                            Standard = false,
                            Unit = "Loaf",
                            UnitCost = 7m,
                            UnitQuantity = 1.0,
                            Vegetarian = false
                        },
                        new
                        {
                            ID = new Guid("b5c71a81-a312-47fc-b65d-db676f5c817c"),
                            GlutenFree = true,
                            IngredientCategoryID = new Guid("e2c53348-0f87-4fe8-af85-fa9329a9af5c"),
                            LactoseFree = true,
                            Name = "Tomato Sauce",
                            Perishable = false,
                            Standard = true,
                            Unit = "Bottle",
                            UnitCost = 4m,
                            UnitQuantity = 1.0,
                            Vegetarian = true
                        },
                        new
                        {
                            ID = new Guid("5eb4eb18-9302-4c68-bfa3-5b7f620d4fdd"),
                            GlutenFree = true,
                            IngredientCategoryID = new Guid("e2c53348-0f87-4fe8-af85-fa9329a9af5c"),
                            LactoseFree = true,
                            Name = "Mustard",
                            Perishable = false,
                            Standard = true,
                            Unit = "Bottle",
                            UnitCost = 4.15m,
                            UnitQuantity = 1.0,
                            Vegetarian = true
                        },
                        new
                        {
                            ID = new Guid("484e1910-d39a-4c6f-8771-6246be694180"),
                            GlutenFree = true,
                            IngredientCategoryID = new Guid("e2c53348-0f87-4fe8-af85-fa9329a9af5c"),
                            LactoseFree = true,
                            Name = "BBQ Sauce",
                            Perishable = false,
                            Standard = true,
                            Unit = "Bottle",
                            UnitCost = 4m,
                            UnitQuantity = 1.0,
                            Vegetarian = true
                        });
                });

            modelBuilder.Entity("ScoutsMealPlanner.Models.IngredientCategory", b =>
                {
                    b.Property<Guid>("IngredientCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IngredientCategoryID");

                    b.ToTable("IngredientCategories");

                    b.HasData(
                        new
                        {
                            IngredientCategoryID = new Guid("940da46d-e355-4a70-aea6-5650ff85eacf"),
                            Name = "Dairy"
                        },
                        new
                        {
                            IngredientCategoryID = new Guid("e2c53348-0f87-4fe8-af85-fa9329a9af5c"),
                            Name = "Pantry"
                        },
                        new
                        {
                            IngredientCategoryID = new Guid("940723ff-45eb-4977-8abb-33f3705597c4"),
                            Name = "Bakery"
                        },
                        new
                        {
                            IngredientCategoryID = new Guid("81a35256-2783-4d63-8f78-dcd836cb26b7"),
                            Name = "Meat"
                        },
                        new
                        {
                            IngredientCategoryID = new Guid("d206170b-c46e-4e27-99eb-d9b97e0a9149"),
                            Name = "Fresh"
                        });
                });

            modelBuilder.Entity("ScoutsMealPlanner.Models.IngredientEntry", b =>
                {
                    b.Property<Guid>("IngredientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecipeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("QuantityNeeded")
                        .HasColumnType("float");

                    b.HasKey("IngredientID", "RecipeID");

                    b.HasIndex("RecipeID");

                    b.ToTable("IngredientEntries");

                    b.HasData(
                        new
                        {
                            IngredientID = new Guid("a21b0aef-f047-466b-b440-888db0762dbb"),
                            RecipeID = new Guid("983ddaa0-bfc3-4254-9c3a-a958738cc235"),
                            QuantityNeeded = 0.20000000000000001
                        },
                        new
                        {
                            IngredientID = new Guid("93058517-d4a9-4008-9d84-0c8b2416ff35"),
                            RecipeID = new Guid("983ddaa0-bfc3-4254-9c3a-a958738cc235"),
                            QuantityNeeded = 0.20000000000000001
                        },
                        new
                        {
                            IngredientID = new Guid("61836688-8942-4bb6-b3f0-59ac76e16e76"),
                            RecipeID = new Guid("983ddaa0-bfc3-4254-9c3a-a958738cc235"),
                            QuantityNeeded = 0.044999999999999998
                        },
                        new
                        {
                            IngredientID = new Guid("40236481-6766-48e6-982b-aea9a5f751c6"),
                            RecipeID = new Guid("ceaa6fa0-6d50-4b56-b566-2bdc1e10c506"),
                            QuantityNeeded = 1.75
                        },
                        new
                        {
                            IngredientID = new Guid("3e106ea9-170e-42be-a956-48d618124ba6"),
                            RecipeID = new Guid("ceaa6fa0-6d50-4b56-b566-2bdc1e10c506"),
                            QuantityNeeded = 1.75
                        },
                        new
                        {
                            IngredientID = new Guid("7769dd8d-d19d-4f31-a550-131765363575"),
                            RecipeID = new Guid("ceaa6fa0-6d50-4b56-b566-2bdc1e10c506"),
                            QuantityNeeded = 2.0
                        },
                        new
                        {
                            IngredientID = new Guid("f43b47c4-d63c-441e-a9b0-18e6ed3612f4"),
                            RecipeID = new Guid("ceaa6fa0-6d50-4b56-b566-2bdc1e10c506"),
                            QuantityNeeded = 0.10000000000000001
                        },
                        new
                        {
                            IngredientID = new Guid("b5c71a81-a312-47fc-b65d-db676f5c817c"),
                            RecipeID = new Guid("ceaa6fa0-6d50-4b56-b566-2bdc1e10c506"),
                            QuantityNeeded = 0.02
                        },
                        new
                        {
                            IngredientID = new Guid("5eb4eb18-9302-4c68-bfa3-5b7f620d4fdd"),
                            RecipeID = new Guid("ceaa6fa0-6d50-4b56-b566-2bdc1e10c506"),
                            QuantityNeeded = 0.01
                        },
                        new
                        {
                            IngredientID = new Guid("484e1910-d39a-4c6f-8771-6246be694180"),
                            RecipeID = new Guid("ceaa6fa0-6d50-4b56-b566-2bdc1e10c506"),
                            QuantityNeeded = 0.01
                        });
                });

            modelBuilder.Entity("ScoutsMealPlanner.Models.Meal", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("MealType")
                        .HasColumnType("int");

                    b.Property<Guid>("MenuID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("MenuID");

                    b.ToTable("Meals");

                    b.HasData(
                        new
                        {
                            ID = new Guid("0a8870de-543e-41d4-a495-5de07805bd3c"),
                            Day = 5,
                            MealType = 4,
                            MenuID = new Guid("0c36e53b-5594-4913-83eb-1be922e589ae")
                        },
                        new
                        {
                            ID = new Guid("d077dd98-0926-4e14-b788-e379a09a684b"),
                            Day = 6,
                            MealType = 1,
                            MenuID = new Guid("0c36e53b-5594-4913-83eb-1be922e589ae")
                        });
                });

            modelBuilder.Entity("ScoutsMealPlanner.Models.MealRecipe", b =>
                {
                    b.Property<Guid>("MealID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecipeID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MealID", "RecipeID");

                    b.HasIndex("RecipeID");

                    b.ToTable("MealRecipes");

                    b.HasData(
                        new
                        {
                            MealID = new Guid("0a8870de-543e-41d4-a495-5de07805bd3c"),
                            RecipeID = new Guid("983ddaa0-bfc3-4254-9c3a-a958738cc235")
                        },
                        new
                        {
                            MealID = new Guid("d077dd98-0926-4e14-b788-e379a09a684b"),
                            RecipeID = new Guid("ceaa6fa0-6d50-4b56-b566-2bdc1e10c506")
                        });
                });

            modelBuilder.Entity("ScoutsMealPlanner.Models.Menu", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CampID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MenuName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CampID");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            ID = new Guid("0c36e53b-5594-4913-83eb-1be922e589ae"),
                            CampID = new Guid("626556f9-65ac-4da2-b099-75462405a60d"),
                            EndDate = new DateTime(2020, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuName = "Peckers Patrol Menu",
                            StartDate = new DateTime(2020, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ScoutsMealPlanner.Models.Recipe", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            ID = new Guid("983ddaa0-bfc3-4254-9c3a-a958738cc235"),
                            Name = "Hot Chocolate"
                        },
                        new
                        {
                            ID = new Guid("ceaa6fa0-6d50-4b56-b566-2bdc1e10c506"),
                            Name = "Hot Dogs"
                        });
                });

            modelBuilder.Entity("ScoutsMealPlanner.Models.RecipeEquipment", b =>
                {
                    b.Property<Guid>("RecipeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RecipeID", "EquipmentID");

                    b.HasIndex("EquipmentID");

                    b.ToTable("RecipeEquipment");

                    b.HasData(
                        new
                        {
                            RecipeID = new Guid("983ddaa0-bfc3-4254-9c3a-a958738cc235"),
                            EquipmentID = new Guid("3aff04cd-288c-4cf8-a461-41a7c9e2a91f")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScoutsMealPlanner.Models.Ingredient", b =>
                {
                    b.HasOne("ScoutsMealPlanner.Models.IngredientCategory", "IngredientCategory")
                        .WithMany("Ingredients")
                        .HasForeignKey("IngredientCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoutsMealPlanner.Models.Ingredient", null)
                        .WithMany("Substitutions")
                        .HasForeignKey("IngredientID");
                });

            modelBuilder.Entity("ScoutsMealPlanner.Models.IngredientEntry", b =>
                {
                    b.HasOne("ScoutsMealPlanner.Models.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoutsMealPlanner.Models.Recipe", "Recipe")
                        .WithMany("IngredientEntries")
                        .HasForeignKey("RecipeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScoutsMealPlanner.Models.Meal", b =>
                {
                    b.HasOne("ScoutsMealPlanner.Models.Menu", "Menu")
                        .WithMany("Meals")
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScoutsMealPlanner.Models.MealRecipe", b =>
                {
                    b.HasOne("ScoutsMealPlanner.Models.Meal", "Meal")
                        .WithMany("MealRecipes")
                        .HasForeignKey("MealID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoutsMealPlanner.Models.Recipe", "Recipe")
                        .WithMany("MealRecipes")
                        .HasForeignKey("RecipeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScoutsMealPlanner.Models.Menu", b =>
                {
                    b.HasOne("ScoutsMealPlanner.Models.Camp", "Camp")
                        .WithMany("Menus")
                        .HasForeignKey("CampID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScoutsMealPlanner.Models.RecipeEquipment", b =>
                {
                    b.HasOne("ScoutsMealPlanner.Models.Equipment", "Equipment")
                        .WithMany("RecipeEquipments")
                        .HasForeignKey("EquipmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoutsMealPlanner.Models.Recipe", "Recipe")
                        .WithMany("RecipeEquipments")
                        .HasForeignKey("RecipeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
